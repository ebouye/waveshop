// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id              String   @id @default(cuid())
  email           String   @unique
  firstName String  @map("first_name")
  lastName String  @map("last_name")
  emailVerified Boolean  @default(false)  @map("email_verified")
  password        String
  createdAt       DateTime @default(now())  @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  orders Order[]

  @@map("customers")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  slug        String   @unique
  createdAt   DateTime @default(now())  @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  products Product[]

  @@map("categories")
}

// Product model for shop items
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  createdAt   DateTime @default(now())  @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  isActive    Boolean  @default(true) @map("is_active")

  categoryId String @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  skus       SKU[]

  @@index([categoryId])
  @@map("products")
}

model SKU {
  id            String   @id @default(cuid())
  size          String?
  color         String?
  stockQuantity Int      @default(0)  @map("stock_quantity")
  unitPrice    Decimal  @db.Decimal(10, 2)  @map("unit_price")
  salePrice    Decimal  @db.Decimal(10, 2)  @map("sale_price")
  createdAt     DateTime @default(now())  @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  images    Image[]
  items     OrderItem[]
  productId String  @map("product_id")
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("skus")
}

model Image {
  id        String   @id @default(cuid())
  imageUrl  String  @map("image_url")
  isPrimary Boolean  @default(false)  @map("is_primary")
  createdAt DateTime @default(now())  @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  skuId String  @map("sku_id")
  sku   SKU    @relation(fields: [skuId], references: [id], onDelete: Cascade)

  @@index([skuId])
  @@map("images")
}

// Order model for purchase tracking
model Order {
  id        String      @id @default(cuid())
  total     Decimal     @db.Decimal(10, 2)
  status    OrderStatus @default(PENDING)
  // shipping
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt  @map("updated_at")

  // Relations
  customerId        String  @map("customer_id")
  customer          Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items             OrderItem[]
  shippingAddressId String? @map("shipping_address_id")
  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])

  @@index([customerId])
  @@index([shippingAddressId])
  @@map("orders")
}

// OrderItem model for items within an order
model OrderItem {
  id                  String  @id @default(cuid())
  quantity            Int     @default(1)
  unitPrice Decimal @db.Decimal(10, 2)  @map("unit_price")
  taxAmount           Decimal @db.Decimal(10, 2)  @map("tax_amount")
  discountAmount      Decimal @db.Decimal(10, 2)  @map("discount_amount")

  // Relations
  orderId String  @map("order_id")
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  skuId   String  @map("sku_id")
  sku     SKU    @relation(fields: [skuId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([skuId])
  @@map("order_items")
}

model ShippingAddress {
  id          String  @id @default(cuid())
  address1    String
  address2    String?
  phoneNumber String  @map("phone_number")
  city        String
  state       String?
  postalCode  String?  @map("postal_code")
  countryId   String  @map("country_id")
  country     Country @relation(fields: [countryId], references: [id])
  orders      Order[]

  @@index([countryId])
  @@map("shipping_addresses")
}

model Country {
  id                String            @id @default(cuid())
  name              String            @unique
  code              String            @unique
  shippingAddresses ShippingAddress[]

  @@map("countries")
}

// Enum for order status
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
