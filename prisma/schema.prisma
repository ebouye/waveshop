// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String   @id @default(cuid())
  email     String   @unique
  fullName      String @map("full_name")
  emailIsVerified Boolean @default(false)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]
  @@map("customers")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  @@map("categories")
}

// Product model for shop items
model Product {
  id          String    @id @default(cuid())
  name        String
  description String?
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean @default(true)

  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  SKUs  SKU[]

  @@map("products")
}

model SKU {
  id  String  @id @default(cuid())
  size  String?
  color String?
  stockQuantity Int @default(0)
  unit_price  Decimal @db.Decimal(10, 2)
  sale_price  Decimal @db.Decimal(10, 2)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  images  Image[]
  items OrderItem[]
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Image{
  id  String @id  @default(cuid())
  imageUrl  String
  isPrimary Boolean @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  SKUId String
  SKU SKU @relation(fields: [SKUId], references: [id], onDelete: Cascade)
}

// Order model for purchase tracking
model Order {
  id        String    @id @default(cuid())
  total     Decimal   @db.Decimal(10, 2)
  status    OrderStatus @default(PENDING)
  // shipping
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  customerId String
  customer   Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items  OrderItem[]

  @@map("orders")
}

// OrderItem model for items within an order
model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  line_subtotal     Decimal  @db.Decimal(10, 2) // Price at time of purchase
  qunatity  Int @default(1)
  unitPriceAtPurchase  Decimal @db.Decimal(10, 2)
  taxAmount  Decimal @db.Decimal(10, 2)
  discountAmount  Decimal@db.Decimal(10, 2)

  // Relations
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  SKUId String
  SKU SKU @relation(fields: [SKUId], references: [id], onDelete: Cascade)

  @@map("order_items")
}


model ShippingAddress {
  id  String  @id @default(cuid())
  address1  String
  address2  String?
  phoneNumber String

  @@map("shipping_addresses")
}

model Country {
  name  String  @unique
  code  String  @unique

  @@map("countries")
}


// Enum for order status
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
